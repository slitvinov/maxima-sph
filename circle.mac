/* find a distance between twoo points over a circle */
kill(all);
ndim: 2;
np: 10;
dx: 2*%pi/np;
cutoff: float(3*dx);

load("sph.mac");
load("sph-kernel.mac");
define_kernel(ndim, cutoff, 'wendland6, 'w, 'dw)$

rect2polar(A):= (
if not listp(A) or length(A)#2 then error("rect2polar should be called with vector of length 2"),
block([x: first(A), y: second(A)],
  [sqrt(x^2+y^2), atan2(y, x)]));

polar2rect(A):= (
  if not listp(A) or length(A)#2 then error("polar2rect should be called with vector of length 2"),
  block([r: first(A), t: second(A)],
  [r*cos(t), r*sin(t)]));

/* redefine lshift */
shift: [[0],[-1],[1]]$
lshift: float(2*%pi*shift);

dist_aux(ra, rb):= block([dr: rb-ra], sqrt( dr.dr ));
dist(A, B):= block([ra: second(rect2polar(A)), rb: second(rect2polar(B))],
  catch(xreduce('min, maplist( lambda([q],
      block([d: dist_aux(ra + q, rb)],
        if d<2*cutoff then throw(d) else d)),
      lshift))));

e(ra, rb):= if ra=rb then 0 else (rb - ra)/dist(rb, ra);

vector_project(A, B):= (A.B)/(B.B)*B;
vector_reject (A, B):= A - vector_project(A, B);
vector_back_on_sphere(A):= A / sqrt(A.A);

load("distrib");
random_continuous_uniform(0, 2*%pi);
/* R: create_list([cos(2*%pi*ip/np), sin(2*%pi*ip/np)], ip, 1 .. np); */
R: maplist(lambda([phi], [cos(phi), sin(phi)]), makelist(random_continuous_uniform(0, 2*%pi), i, np));

c: 1.0;
Peq(rho):= c^2*rho$
v: makelist([0, 0], np)$
mu: 1.0;
dt: min( dx/(8*c), dx^2/mu/8);

m: makelist(1.0, np)$
maxima2punto(float(R), "p.dat");

for istep thru 100 do (
  rho: float(makelist(m[j]*sum(w(dist(R[j], R[i])), i, 1, np),
      j, np)),
  P: maplist(Peq, rho),
  Fc: makelist(sum(if i#j then -m[j]*m[i]*(P[i]/rho[i]^2 + P[j]/rho[j]^2)*e(R[i], R[j])*dw(dist(R[j], R[i])) else 0, i, 1, np),
    j, np),
  Fd: makelist(sum(if i#j then mu*m[j]*m[i]*(v[j]-v[i])/(rho[i]*rho[j])/dist(R[j], R[i])*dw(dist(R[j], R[i])) else 0, i, 1, np),
    j, np),
  F: Fd + Fc,
  v: float(v + dt*F/m),
  R: float(R + dt*v),
  R: maplist('vector_back_on_sphere, R),
  maxima2punto(float(R), "p.dat"),
  print(istep));
